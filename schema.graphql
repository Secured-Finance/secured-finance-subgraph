type Transaction @entity {
  id: ID!
  currency: Bytes!
  maturity: BigInt!
  side: Int!
  orderPrice: BigInt!
  taker: User!
  executionType: TransactionExecutionType!

  forwardValue: BigInt!
  amount: BigInt!
  feeInFV: BigInt!
  averagePrice: BigDecimal!

  createdAt: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!

  lendingMarket: LendingMarket!
}

type Order @entity {
  id: ID!
  orderId: BigInt!
  maker: User!
  currency: Bytes!
  side: Int!
  maturity: BigInt!
  inputUnitPrice: BigInt!
  inputAmount: BigInt!
  filledAmount: BigInt!
  status: OrderStatus!
  statusUpdatedAt: BigInt!
  lendingMarket: LendingMarket!
  isPreOrder: Boolean!
  type: OrderType!

  createdAt: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!
}

type LendingMarket @entity {
  id: ID!
  prettyName: String!
  currency: Bytes!
  maturity: BigInt!
  isActive: Boolean!
  transactions: [Transaction!]! @derivedFrom(field: "lendingMarket")
  orders: [Order!]! @derivedFrom(field: "lendingMarket")
  protocol: Protocol!
  volume: BigInt!
  dailyVolume: [DailyVolume!]! @derivedFrom(field: "lendingMarket")
  openingUnitPrice: BigInt!
  lastLendUnitPrice: BigInt!
  lastBorrowUnitPrice: BigInt!
  offsetAmount: BigInt!
}

enum TransactionExecutionType {
  Sync
  Lazy
}

enum OrderType {
  Market
  Limit
}

enum OrderStatus {
  Open
  Cancelled
  Filled
  PartiallyFilled
  Blocked
  PartiallyBlocked
  Expired
}

type User @entity {
  id: ID! # wallet address
  createdAt: BigInt!
  transactionCount: BigInt!
  transactions: [Transaction!]! @derivedFrom(field: "taker")
  orderCount: BigInt!
  orders: [Order!]! @derivedFrom(field: "maker")
  liquidationCount: BigInt!
  liquidations: [Liquidation!]! @derivedFrom(field: "user")
  transferCount: BigInt!
  transfers: [Transfer!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "user")
}

type DailyVolume @entity {
  id: ID! # currency-maturity-date(dd-mm-yyyy)
  currency: Bytes!
  maturity: BigInt!
  day: String! # dd-mm-yyyy
  volume: BigInt!
  timestamp: BigInt!
  lendingMarket: LendingMarket!
}

type Protocol @entity {
  id: ID! # ethereum
  totalUsers: BigInt!
  lendingMarkets: [LendingMarket!]! @derivedFrom(field: "protocol")
}

type Liquidation @entity {
  id: ID!
  collateralCurrency: Bytes!
  debtCurrency: Bytes!
  debtMaturity: BigInt!
  debtAmount: BigInt!
  user: User!

  timestamp: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!
}

enum TransferType {
  Deposit
  Withdraw
}

type Transfer @entity {
  id: ID!
  user: User!
  currency: Bytes!
  amount: BigInt!
  transferType: TransferType!

  timestamp: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!
}

type Deposit @entity {
  id: ID!
  user: User!
  currency: Bytes!
  amount: BigInt!
}
type CandleStick @entity {
  id: ID! # A composite ID, e.g., "currency-maturity-epochTime"
  interval: BigInt! # interval in seconds
  currency: Bytes!
  maturity: BigInt!
  timestamp: BigInt! # The start time of the interval
  open: BigInt!
  close: BigInt!
  high: BigInt!
  low: BigInt!
  volume: BigInt!
  lendingMarket: LendingMarket!
}

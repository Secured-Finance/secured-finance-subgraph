type Transaction @entity {
  id: ID!
  currency: Bytes!
  maturity: BigInt!
  side: Int!
  orderPrice: BigInt!
  taker: User!
  executionType: TransactionExecutionType!

  forwardValue: BigInt!
  amount: BigInt!
  averagePrice: BigDecimal!

  createdAt: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!

  lendingMarket: LendingMarket!
}

type Order @entity {
  id: ID!
  orderId: BigInt!
  maker: User!
  currency: Bytes!
  side: Int!
  maturity: BigInt!
  unitPrice: BigInt!
  filledAmount: BigInt!
  amount: BigInt!
  status: OrderStatus!
  lendingMarket: LendingMarket!

  createdAt: BigInt!
  blockNumber: BigInt!
  txHash: Bytes!
}

type LendingMarket @entity {
  id: ID!
  prettyName: String!
  currency: Bytes!
  maturity: BigInt!
  isActive: Boolean!
  transactions: [Transaction!]! @derivedFrom(field: "lendingMarket")
  orders: [Order!]! @derivedFrom(field: "lendingMarket")
  protocol: Protocol!
  volume: BigInt!
  dailyVolume: [DailyVolume!]! @derivedFrom(field: "lendingMarket")
}

enum TransactionExecutionType {
  Sync
  Lazy
}

enum OrderStatus {
  Open
  Cancelled
  Filled
  Expired
  PartiallyFilled
}

type User @entity {
  id: ID! # wallet address
  noOfTransactions: BigInt!
  transactions: [Transaction!]! @derivedFrom(field: "taker")
  noOfOrders: BigInt!
  orders: [Order!]! @derivedFrom(field: "maker")
}

type DailyVolume @entity {
  id: ID! # currency-maturity-date(dd-mm-yyyy)
  currency: Bytes!
  maturity: BigInt!
  day: String! # dd-mm-yyyy
  volume: BigInt!
  timestamp: BigInt!
  lendingMarket: LendingMarket!
}

type Protocol @entity {
  id: ID! # ethereum
  totalUsers: BigInt!
  lendingMarkets: [LendingMarket!]! @derivedFrom(field: "protocol")
}
